data$z <- c(pile)
colnames(data) <- c("x", "y", "z")
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
ggplot2::theme_void()
},
animate = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
# data <- data[data$step >= start & data$step <= end, ]
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
gganimate::transition_manual(step) +
ggplot2::labs(title = "Step = {current_frame}.") +
ggplot2::theme_void()
},
data = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
data
}),
private = list(
flatten_boundary = function(matrix) {
matrix[1, ] <- 0
matrix[, 1] <- 0
matrix[nrow(matrix), ] <- 0
matrix[, ncol(matrix)] <- 0
matrix
},
shifts =  matrix(c(0, 1,
0, -1,
1, 0,
-1, 0), ncol = 2),
sd = NA,
zc = NA
)
)
BAK$new()
BAK <- R6::R6Class("BAK", list(
pile = list(),
seeds = NULL,
initialize =  function(nx = 10, ny = 10, zc = 4, Mz = zc) {
self$pile <- self$add_pile(private$flatten_boundary(matrix(round(runif(nx*ny, 0, Mz)), ncol = ny)))
private$sd <- sd(self$pile[[1]])
private$zc <- zc
invisible(self)
},
iterate = function(N) {
for (n in seq_len(N)) {
private$iterate_once()
}
invisible(self)
},
latest_pile = function() {
self$pile[[length(self$pile)]]
},
add_pile = function(pile) {
self$pile <- c(self$pile, list(pile))
},
plot = function(n = "latest") {
if (n == "latest") {
n = length(self$pile)
}
pile <- self$pile[[n]]
data <- expand.grid(x = seq_len(nrow(pile)),
y = seq_len(ncol(pile)))
data$z <- c(pile)
colnames(data) <- c("x", "y", "z")
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
ggplot2::theme_void()
},
animate = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
# data <- data[data$step >= start & data$step <= end, ]
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
gganimate::transition_manual(step) +
ggplot2::labs(title = "Step = {current_frame}.") +
ggplot2::theme_void()
},
data = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
data
}),
private = list(
flatten_boundary = function(matrix) {
matrix[1, ] <- 0
matrix[, 1] <- 0
matrix[nrow(matrix), ] <- 0
matrix[, ncol(matrix)] <- 0
matrix
},
iterate_once = function() {
pile <- self$latest_pile()
critic <- pile >= private$zc
if (sum(critic) == 0) {
# If no point is above criticality, then make a random one critical.
grain_i <- sample(seq(2, nrow(pile) - 1), 1)
grain_j <- sample(seq(2, ncol(pile) - 1), 1)
pile[grain_i, grain_j] <- private$zc
self$add_pile(pile)
self$seeds <- c(self$seeds, length(self$pile))
private$sd <- c(private$sd, sd(pile))
return(invisible(self))
}
pile[critic] <- pile[critic] - private$zc
index <- which(critic, arr.ind = TRUE)
for (ij in seq_len(nrow(index))) {
adds <- matrix(rep(index[ij, ], 4), ncol = 2, byrow = TRUE) + self$shifts
pile[adds] <- pile[adds] + 1
}
pile <- private$flatten_boundary(pile)
self$add_pile(pile)
private$sd <- c(private$sd, sd(pile))
invisible(self)
},
shifts =  matrix(c(0, 1,
0, -1,
1, 0,
-1, 0), ncol = 2),
sd = NA,
zc = NA
)
)
set.seed(42)
piles <- BAK$new(30, 30)$iterate(2000)
long <- which.max(diff(piles$seeds))
piles$plot()
piles$plot(1)
piles$plot(2)
piles$plot(4)
piles$plot(500)
piles$animate(1, 200)
BAK <- R6::R6Class("BAK", list(
pile = list(),
seeds = NULL,
initialize =  function(nx = 10, ny = 10, zc = 4, Mz = zc) {
self$pile <- self$add_pile(private$flatten_boundary(matrix(round(runif(nx*ny, 0, Mz)), ncol = ny)))
private$sd <- sd(self$pile[[1]])
private$zc <- zc
invisible(self)
},
iterate = function(N) {
for (n in seq_len(N)) {
private$iterate_once()
}
invisible(self)
},
latest_pile = function() {
self$pile[[length(self$pile)]]
},
add_pile = function(pile) {
self$pile <- c(self$pile, list(pile))
},
plot = function(n = "latest") {
if (n == "latest") {
n = length(self$pile)
}
pile <- self$pile[[n]]
data <- expand.grid(x = seq_len(nrow(pile)),
y = seq_len(ncol(pile)))
data$z <- c(pile)
colnames(data) <- c("x", "y", "z")
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
ggplot2::theme_void()
},
animate = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
# data <- data[data$step >= start & data$step <= end, ]
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
gganimate::transition_manual(step) +
ggplot2::labs(title = "Step = {current_frame}.") +
ggplot2::theme_void()
},
data = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
data
}),
private = list(
flatten_boundary = function(matrix) {
matrix[1, ] <- 0
matrix[, 1] <- 0
matrix[nrow(matrix), ] <- 0
matrix[, ncol(matrix)] <- 0
matrix
},
iterate_once = function() {
pile <- self$latest_pile()
critic <- pile >= private$zc
if (sum(critic) == 0) {
# If no point is above criticality, then make a random one critical.
grain_i <- sample(seq(2, nrow(pile) - 1), 1)
grain_j <- sample(seq(2, ncol(pile) - 1), 1)
pile[grain_i, grain_j] <- private$zc
self$add_pile(pile)
self$seeds <- c(self$seeds, length(self$pile))
private$sd <- c(private$sd, sd(pile))
return(invisible(self))
}
pile[critic] <- pile[critic] - private$zc
index <- which(critic, arr.ind = TRUE)
for (ij in seq_len(nrow(index))) {
adds <- matrix(rep(index[ij, ], 4), ncol = 2, byrow = TRUE) + private$shifts
pile[adds] <- pile[adds] + 1
}
pile <- private$flatten_boundary(pile)
self$add_pile(pile)
private$sd <- c(private$sd, sd(pile))
invisible(self)
},
shifts =  matrix(c(0, 1,
0, -1,
1, 0,
-1, 0), ncol = 2),
sd = NA,
zc = NA
)
)
set.seed(42)
piles <- BAK$new(30, 30)$iterate(2000)
piles$plot(5)
piles$animate(1, 200)
BAK <- R6::R6Class("BAK", list(
pile = list(),
seeds = NULL,
initialize =  function(nx = 10, ny = 10, zc = 4, Mz = zc) {
self$pile <- self$add_pile(private$flatten_boundary(matrix(round(runif(nx*ny, 0, Mz)), ncol = ny)))
private$sd <- sd(self$pile[[1]])
private$zc <- zc
invisible(self)
},
iterate = function(N) {
for (n in seq_len(N)) {
private$iterate_once()
}
invisible(self)
},
latest_pile = function() {
self$pile[[length(self$pile)]]
},
add_pile = function(pile) {
self$pile <- c(self$pile, list(pile))
},
plot = function(n = "latest") {
if (n == "latest") {
n = length(self$pile)
}
pile <- self$pile[[n]]
data <- expand.grid(x = seq_len(nrow(pile)),
y = seq_len(ncol(pile)))
data$z <- c(pile)
colnames(data) <- c("x", "y", "z")
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
ggplot2::theme_void()
},
animate = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
# data <- data[data$step >= start & data$step <= end, ]
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
gganimate::transition_manual(step) +
ggplot2::labs(title = "Step = {current_frame}.") +
ggplot2::theme_void()
},
data = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
data
}),
private = list(
flatten_boundary = function(matrix) {
matrix[1, ] <- 0
matrix[, 1] <- 0
matrix[nrow(matrix), ] <- 0
matrix[, ncol(matrix)] <- 0
matrix
},
iterate_once = function() {
pile <- self$latest_pile()
critic <- pile >= private$zc
if (sum(critic) == 0) {
# If no point is above criticality, then make a random one critical.
grain_i <- sample(seq(2, nrow(pile) - 1), 1)
grain_j <- sample(seq(2, ncol(pile) - 1), 1)
pile[grain_i, grain_j] <- private$zc
self$add_pile(pile)
self$seeds <- c(self$seeds, length(self$pile))
private$sd <- c(private$sd, sd(pile))
return(invisible(self))
}
pile[critic] <- pile[critic] - private$zc
index <- which(critic, arr.ind = TRUE)
for (ij in seq_len(nrow(index))) {
adds <- matrix(rep(index[ij, ], 4), ncol = 2, byrow = TRUE) + private$shifts
pile[adds] <- pile[adds] + 1
}
pile <- private$flatten_boundary(pile)
self$add_pile(pile)
private$sd <- c(private$sd, sd(pile))
invisible(self)
},
shifts =  matrix(c(0, 1,
0, -1,
1, 0,
-1, 0), ncol = 2),
sd = NA,
zc = NA
)
)
set.seed(42)
piles <- BAK$new(40, 40)$iterate(2000)
piles$animate()
piles$animate(1, 200)
long <- which.max(diff(piles$seeds))
piles$animate(piles$seeds[long], piles$seeds[long + 1])
piles <- BAK$new(60, 60)$iterate(2000)
long <- which.max(diff(piles$seeds))
piles$animate(piles$seeds[long], piles$seeds[long + 1])
piles <- BAK$new(100, 100)$iterate(2000)
long <- which.max(diff(piles$seeds))
long
len <-  piles$seeds[long + 1] - piles$seeds[long]
ln
len
piles <- BAK$new(100, 100)$iterate(2000)
long <- which.max(diff(piles$seeds))
len <-  piles$seeds[long + 1] - piles$seeds[long]
piles$animate(piles$seeds[long], piles$seeds[long + 1])
BAK <- R6::R6Class("BAK", list(
pile = list(),
seeds = NULL,
initialize =  function(nx = 10, ny = 10, zc = 4, Mz = zc) {
self$pile <- self$add_pile(private$flatten_boundary(matrix(round(runif(nx*ny, 0, Mz)), ncol = ny)))
private$sd <- sd(self$pile[[1]])
private$zc <- zc
invisible(self)
},
iterate = function(N) {
for (n in seq_len(N)) {
private$iterate_once()
}
invisible(self)
},
latest_pile = function() {
self$pile[[length(self$pile)]]
},
add_pile = function(pile) {
self$pile <- c(self$pile, list(pile))
},
plot = function(n = "latest") {
if (n == "latest") {
n = length(self$pile)
}
pile <- self$pile[[n]]
data <- expand.grid(x = seq_len(nrow(pile)),
y = seq_len(ncol(pile)))
data$z <- c(pile)
colnames(data) <- c("x", "y", "z")
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
ggplot2::theme_void()
},
animate = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
# data <- data[data$step >= start & data$step <= end, ]
ggplot2::ggplot(data, ggplot2::aes(x, y, fill = z)) +
ggplot2::geom_raster() +
ggplot2::scale_fill_viridis_c() +
ggplot2::coord_fixed() +
gganimate::transition_manual(step) +
ggplot2::labs(title = "Step = {current_frame}.") +
ggplot2::theme_void()
},
data = function(start = 1, end = "last") {
if (end == "last") {
end <- length(self$pile)
}
data <- reshape2::melt(self$pile[seq(start, end)])
colnames(data) <- c("x", "y", "z", "step")
data
}),
private = list(
flatten_boundary = function(matrix) {
matrix[1, ] <- 0
matrix[, 1] <- 0
matrix[nrow(matrix), ] <- 0
matrix[, ncol(matrix)] <- 0
matrix
},
iterate_once = function() {
pile <- self$latest_pile()
critic <- pile >= private$zc
if (sum(critic) == 0) {
# If no point is above criticality, then make a random one critical.
grain_i <- sample(seq(2, nrow(pile) - 1), 1)
grain_j <- sample(seq(2, ncol(pile) - 1), 1)
pile[grain_i, grain_j] <- private$zc
self$add_pile(pile)
self$seeds <- c(self$seeds, length(self$pile))
private$sd <- c(private$sd, sd(pile))
return(invisible(self))
}
pile[critic] <- pile[critic] - private$zc
index <- which(critic, arr.ind = TRUE)
for (ij in seq_len(nrow(index))) {
adds <- matrix(rep(index[ij, ], 4), ncol = 2, byrow = TRUE) + private$shifts
pile[adds] <- pile[adds] + 1
}
pile <- private$flatten_boundary(pile)
self$add_pile(pile)
private$sd <- c(private$sd, sd(pile))
invisible(self)
},
shifts =  matrix(c(0, 1,
0, -1,
1, 0,
-1, 0), ncol = 2),
sd = NA,
zc = NA
)
)
set.seed(42)
piles <- BAK$new(100, 100)$iterate(2000)
long <- which.max(diff(piles$seeds))
piles$animate(piles$seeds[long], piles$seeds[long + 1])
remotes::install_github("mjskay/tidybayes")
library(tidybayes)
library(tidybayes)
library(tidyverse)
set.seed(1234)
tb <-
tibble(time = 0:100) %>%
group_by_all() %>%
do(tibble(value = rnorm(100, .$time, 10))) %>%
median_qi(value, .width = c(.50, .80, .95))
gg <-
tb %>%
ggplot() +
# while not specified, geom_lineribbon will fill in ymin, ymax, and fill
# based on .lower, .upper, and .width
geom_lineribbon(aes(x = time, y = value)) +
scale_fill_brewer()
gg
gg +
ggnewscale::new_scale_fill() +
geom_point(
dat = data.frame(x = runif(100,0,100), y = runif(100,0,100),
fill = sample(1:4, 100, replace = TRUE)), aes(x = x, y = y, fill = fill), pch = 21
)
install.package(c("jsonlite", "plumber"))
install.packages(c("jsonlite", "plumber"))
source("~/Documents/RenBaires/encuentros/2019-06-24_Plumber/entrypoint.R")
source("~/Documents/RenBaires/encuentros/2019-06-24_Plumber/entrypoint.R")
source("~/Documents/RenBaires/encuentros/2019-06-24_Plumber/entrypoint.R")
setwd("~/Documents/RenBaires/encuentros/2019-06-24_Plumber")
source("entrypoint.R")
source("entrypoint.R")
